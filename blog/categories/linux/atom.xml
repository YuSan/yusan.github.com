<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | YuSan's Blog]]></title>
  <link href="http://YuSan.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://YuSan.github.io/"/>
  <updated>2014-09-21T22:15:51+08:00</updated>
  <id>http://YuSan.github.io/</id>
  <author>
    <name><![CDATA[雨伞先生]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Markdown Editor——haroopad]]></title>
    <link href="http://YuSan.github.io/blog/2014/06/10/markdown-editor-haroopad/"/>
    <updated>2014-06-10T12:15:54+08:00</updated>
    <id>http://YuSan.github.io/blog/2014/06/10/markdown-editor-haroopad</id>
    <content type="html"><![CDATA[<h4 id="haroopadhttppadharoopresscomuserhtmlmarkdownchromiumuiwindowsmac-os-xlinux54img-httppadharoopresscomassetsimagesintro1png-"><a href="http://pad.haroopress.com/user.html">Haroopad</a>是一款跨平台的markdown编辑器，使用Chromium作为UI，支持Windows、Mac OS X和Linux。主题样式丰富，语法标亮支持54种编程语言。<img src="http://pad.haroopress.com/assets/images/intro/1.png"></h4>
<!--more-->
<p>####为什么是它呢？因为它支持Linux系统，Markdown编辑器有很多，有很多好用的在线编辑器，但是在网络支持不好的时候，有一款顺手的软件是极好的！支持Linux系统的软件貌似就三个。<a href="http://pad.haroopress.com/user.html">Haroopad</a>是其中功能比较全面的一款！软件是个韩国人开发的，对中文的支持很好，所以就是它了！
####以前就找到了这个软件，可能是因为GFW的原因，软件主页提供的下载无法打开，貌似软件是在Dropbox的，费了好大劲下载下来，安装的时候现实的是依赖包已满足，但是安装完成之后却打不开，刚开始太笨了，以为是我的linux版本不对呢，然后就卸载了，最近又把它找出来，想再安装一次试试，装完了依然打不开！
####突然想起来可以在终端敲命令试试看能不能启动，或者看看有什么错误信息，果然在终端输入<code>haroopad</code>之后，显示一个动态库<code>libudev.so.0</code>找不到：
<img src="http://yusan.qiniudn.com/2014-06-10%2010:50:05%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png">
####然后百度了一下，找到有类似的情况，看了看，原来很简单的!
####在终端输入<code>locate udev.so</code>看看这个库文件到底有木有呢？
<img src="http://yusan.qiniudn.com/2014-06-10%2010:52:17%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png">
####发现系统里面的文件名跟<code>haroopad</code>要加载的库文件名称不同，创建一个新的软链接到这个库即可！在终端输入下面的命令，输入密码执行完成：
    sudo ln -s /lib/x86<em>64-linux-gnu/libudev.so.1 /lib/x86</em>64-linux-gnu/libudev.so.0
然后再输入<code>haroopad</code>，成功地打开了！
<img src="http://yusan.qiniudn.com/2014-06-10%2010:54:39%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png">
####之后从软件列表打开软件也可以了，完成！
<img src="http://yusan.qiniudn.com/2014-06-10%2013:11:17%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png">
####<span class="fluo">软件下载<a href="http://pan.baidu.com/s/1jGMbj1s">64位的</a> </span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux下使用FFmpeg进行屏幕录像]]></title>
    <link href="http://YuSan.github.io/blog/2014/05/24/recordscreenuseffmpeg/"/>
    <updated>2014-05-24T14:43:56+08:00</updated>
    <id>http://YuSan.github.io/blog/2014/05/24/recordscreenuseffmpeg</id>
    <content type="html"><![CDATA[<p><img src="http://yusan.qiniudn.com/2014-05-24%2014:49:23%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" title="‘我的电脑配置及系统信息’" >
<!--more-->
####去年刚装好LinuxMint的时候，这个linux发行版特别棒!让我觉得这个系统很棒的其中一个很大的原因就是它很简单的支持各种小应用的添加，我把系统配置好之后感觉用这特别顺手！
我装了一个屏幕录像的小程序，上一篇博文里面的那个编译recovery的视频就是用这个小程序录制的，可是奇怪的是好像从那次之后我再想录制屏幕就不行了，甚至把它卸载并重装了好几次都不行，也试了其他的，感觉都不好用。最后看了下那个小程序的代码，原来是执行一个<code>shell</code>脚本来调用<span class="fluo">ffmpeg</span>录制屏幕的，在网上查了一番，才知道<span class="fluo">ffmpeg</span>真的好强大！可是我手动执行那个脚本却还是不行，然后按照里面的代码在终端执行，并把文件名命名的很简单，居然成功了，最后才明白原来是作者的那个脚本里面文件命名有问题导致的录像失败，命名是采用当前时间的，代码有一点点小问题，所以导致了失败.
<p class='info info' data-title='Code'>下面贴上代码，也可以点代码框右上角直接下载脚本!</p>
<code>bash Record Screen use FFmpeg without Audio http://yusan.qiniudn.com/blogscreencapture.sh Download
#!/bin/bash
if [ ! -e $HOME/Videos ]
then
mkdir -p $HOME/Videos
fi
dir="$HOME/Videos"
size=$( xdpyinfo | grep 'dimensions:' | awk '{print $2}' )
name=$( date +'%F_%I:%M' )
video="$dir/$name.mkv"
ffmpeg -f x11grab -s $size -r 35 -qscale 1  -i :0.0 $video
</code>
<code>bash Record Screen use FFmpeg with Audio http://yusan.qiniudn.com/blogscreencapturesound.sh Download
#!/bin/bash
if [ ! -e $HOME/Videos ]
then
mkdir -p $HOME/Videos
fi
dir="$HOME/Videos"
size=$( xdpyinfo | grep 'dimensions:' | awk '{print $2}' )
name=$( date +'%F_%I:%M' )
video="$dir/$name.mkv"
ffmpeg -f alsa -ac 2 -i pulse -f x11grab -s $size -r 35 -qscale 1  -i :0.0 $video
</code>
录制样例：
<video width='640' height='320' preload='none' controls poster='http://yusan.qiniudn.com/blog2014-05-24%2015:20:07%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png'><source src='http://yusan.qiniudn.com/blog2014-05-24_03:15.m4v' ></video></p>

<p><p class='info info' data-title='FFmpeg'>FFmpeg is a very great tool!</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Shell 用法和技巧]]></title>
    <link href="http://YuSan.github.io/blog/2013/12/02/linux-shell-use-and-skill/"/>
    <updated>2013-12-02T22:35:00+08:00</updated>
    <id>http://YuSan.github.io/blog/2013/12/02/linux-shell-use-and-skill</id>
    <content type="html"><![CDATA[<hr />
<p>## 在码农网看到的，学习一下，顺便留个备份～～</p>

<!--more-->

<h4 id="bash">检查远程端口是否对bash开放：</h4>
<blockquote>
  <p>echo &gt;/dev/tcp/8.8.8.8/53 &amp;&amp; echo “open”</p>
</blockquote>

<h4 id="section">让进程转入后台：</h4>
<blockquote>
  <p>Ctrl + z</p>
</blockquote>

<h4 id="section-1">将进程转到前台：</h4>
<blockquote>
  <p>fg</p>
</blockquote>

<h4 id="n">产生随机的十六进制数，其中n是字符数：</h4>
<blockquote>
  <p>openssl rand -hex n</p>
</blockquote>

<h4 id="shell">在当前shell里执行一个文件里的命令：</h4>
<blockquote>
  <p>source /home/user/file.name</p>
</blockquote>

<h4 id="section-2">截取前5个字符：</h4>
<blockquote>
  <p>${variable:0:5}</p>
</blockquote>

<h4 id="ssh-debug-">SSH debug 模式:</h4>
<blockquote>
  <p>ssh -vvv user@ip_address</p>
</blockquote>

<h4 id="ssh-with-pem-key">SSH with pem key:</h4>
<blockquote>
  <p>ssh user@ip_address -i key.pem</p>
</blockquote>

<h4 id="wget">用wget抓取完整的网站目录结构，存放到本地目录中：</h4>
<blockquote>
  <p>wget -r –no-parent –reject “index.html*” http://hostname/ -P /home/user/dirs</p>
</blockquote>

<h4 id="section-3">一次创建多个目录：</h4>
<blockquote>
  <p>mkdir -p /home/user/{test,test1,test2}</p>
</blockquote>

<h4 id="section-4">列出包括子进程的进程树：</h4>
<blockquote>
  <p>ps axwef</p>
</blockquote>

<h4 id="war-">创建 war 文件:</h4>
<blockquote>
  <p>jar -cvf name.war file</p>
</blockquote>

<h4 id="section-5">测试硬盘写入速度：</h4>
<blockquote>
  <p>dd if=/dev/zero of=/tmp/output.img bs=8k count=256k; rm -rf /tmp/output.img</p>
</blockquote>

<h4 id="section-6">测试硬盘读取速度：</h4>
<blockquote>
  <p>hdparm -Tt /dev/sda</p>
</blockquote>

<h4 id="md5-hash">获取文本的md5 hash：</h4>
<blockquote>
  <table>
    <tbody>
      <tr>
        <td>echo -n “text”</td>
        <td>md5sum</td>
      </tr>
    </tbody>
  </table>
</blockquote>

<h4 id="xml">检查xml格式：</h4>
<blockquote>
  <p>xmllint –noout file.xml</p>
</blockquote>

<h4 id="targz">将tar.gz提取到新目录里：</h4>
<blockquote>
  <p>tar zxvf package.tar.gz -C new_dir</p>
</blockquote>

<h4 id="curlhttp">使用curl获取HTTP头信息：</h4>
<blockquote>
  <p>curl -I http://www.example.com</p>
</blockquote>

<h4 id="yymmddhhmm">修改文件或目录的时间戳(YYMMDDhhmm):</h4>
<blockquote>
  <p>touch -t 0712250000 file</p>
</blockquote>

<h4 id="wgetftp">用wget命令执行ftp下载：</h4>
<blockquote>
  <p>wget -m ftp://username:password@hostname</p>
</blockquote>

<h4 id="section-7">生成随机密码(例子里是16个字符长):</h4>
<blockquote>
  <table>
    <tbody>
      <tr>
        <td>LANG=c &lt; /dev/urandom tr -dc _A-Z-a-z-0-9</td>
        <td>head -c${1:-16};echo;</td>
      </tr>
    </tbody>
  </table>
</blockquote>

<h4 id="section-8">快速备份一个文件：</h4>
<blockquote>
  <p>cp some_file_name{,.bkp}</p>
</blockquote>

<h4 id="windows">访问Windows共享目录：</h4>
<blockquote>
  <p>smbclient -U “DOMAIN\user” //dc.domain.com/share/test/dir</p>
</blockquote>

<h4 id="section-9">执行历史记录里的命令(这里是第100行):</h4>
<blockquote>
  <p>!100</p>
</blockquote>

<h4 id="section-10">解压:</h4>
<blockquote>
  <p>unzip package_name.zip -d dir_name</p>
</blockquote>

<h4 id="ctrl--d-">输入多行文字(CTRL + d 退出):</h4>
<blockquote>
  <p>cat &gt; test.txt</p>
</blockquote>

<h4 id="section-11">创建空文件或清空一个现有文件：</h4>
<blockquote>
  <p>test.txt</p>
</blockquote>

<h4 id="ubuntu-ntp-server">与Ubuntu NTP server同步时间：</h4>
<blockquote>
  <p>ntpdate ntp.ubuntu.com</p>
</blockquote>

<h4 id="netstattcp4">用netstat显示所有tcp4监听端口：</h4>
<blockquote>
  <table>
    <tbody>
      <tr>
        <td>netstat -lnt4</td>
        <td>awk ‘{print $4}’</td>
        <td>cut -f2 -d:</td>
        <td>grep -o ‘[0-9]*’</td>
      </tr>
    </tbody>
  </table>
</blockquote>

<h4 id="qcow2">qcow2镜像文件转换：</h4>
<blockquote>
  <p>qemu-img convert -f qcow2 -O raw precise-server-cloudimg-amd64-disk1.img 		  \precise-server-cloudimg-amd64-disk1.raw</p>
</blockquote>

<h4 id="section-12">重复运行文件，显示其输出（缺省是2秒一次）：</h4>
<blockquote>
  <p>watch ps -ef</p>
</blockquote>

<h4 id="section-13">所有用户列表：</h4>
<blockquote>
  <p>getent passwd</p>
</blockquote>

<h4 id="mount-root-in-readwrite-mode">Mount root in read/write mode:</h4>
<blockquote>
  <p>mount -o remount,rw /</p>
</blockquote>

<h4 id="section-14">挂载一个目录（这是不能使用链接的情况）:</h4>
<blockquote>
  <p>mount –bind /source /destination</p>
</blockquote>

<h4 id="dns-server">动态更新DNS server:</h4>
<blockquote>
  <p>nsupdate &lt; &lt;EOF
update add $HOST 86400 A $IP
send
EOF</p>
</blockquote>

<h4 id="grep">递归grep所有目录：</h4>
<blockquote>
  <p>grep -r “some_text” /path/to/dir</p>
</blockquote>

<h4 id="section-15">列出前10个最大的文件：</h4>
<blockquote>
  <table>
    <tbody>
      <tr>
        <td>lsof /</td>
        <td>awk ‘{ if($7 &gt; 1048576) print $7/1048576 “MB “$9 }’</td>
        <td>sort -n -u</td>
        <td>tail</td>
      </tr>
    </tbody>
  </table>
</blockquote>

<h4 id="mb">显示剩余内存(MB):</h4>
<blockquote>
  <table>
    <tbody>
      <tr>
        <td>free -m</td>
        <td>grep cache</td>
        <td>awk ‘/[0-9]/{ print $4” MB” }’</td>
      </tr>
    </tbody>
  </table>
</blockquote>

<h4 id="vim">打开Vim并跳到文件末：</h4>
<blockquote>
  <p>vim + some_file_name</p>
</blockquote>

<h4 id="git-master">Git 克隆指定分支(master):</h4>
<blockquote>
  <p>git clone git@github.com:name/app.git -b master</p>
</blockquote>

<h4 id="git-develop">Git 切换到其它分支(develop):</h4>
<blockquote>
  <p>git checkout develop</p>
</blockquote>

<h5 id="git-myfeature">Git 删除分支(myfeature):</h5>
<blockquote>
  <p>git branch -d myfeature</p>
</blockquote>

<h4 id="git-">Git 删除远程分支</h4>
<blockquote>
  <p>git push origin :branchName</p>
</blockquote>

<h4 id="git--1">Git 将新分支推送到远程服务器：</h4>
<blockquote>
  <p>git push -u origin mynewfeature</p>
</blockquote>

<h4 id="cat">打印历史记录中最后一次cat命令：</h4>
<blockquote>
  <p>!cat:p</p>
</blockquote>

<h4 id="cat-1">运行历史记录里最后一次cat命令：</h4>
<blockquote>
  <p>!cat</p>
</blockquote>

<h4 id="homeuser">找出/home/user下所有空子目录:</h4>
<blockquote>
  <p>find /home/user -maxdepth 1 -type d -empty</p>
</blockquote>

<h4 id="testtxt50-60">获取test.txt文件中第50-60行内容：</h4>
<blockquote>
  <p>&lt; test.txt sed -n ‘50,60p’</p>
</blockquote>

<h4 id="mkdir-roottest--sudo-mkdir-roottest">运行最后一个命令(如果最后一个命令是mkdir /root/test, 下面将会运行: sudo mkdir /root/test)：</h4>
<blockquote>
  <p>sudo !!</p>
</blockquote>

<h4 id="ram--ramdisk-tmpram">创建临时RAM文件系统 – ramdisk (先创建/tmpram目录):</h4>
<blockquote>
  <p>mount -t tmpfs tmpfs /tmpram -o size=512m</p>
</blockquote>

<h4 id="grep-whole-words">Grep whole words:</h4>
<blockquote>
  <p>grep -w “name” test.txt</p>
</blockquote>

<h4 id="section-16">在需要提升权限的情况下往一个文件里追加文本：</h4>
<blockquote>
  <table>
    <tbody>
      <tr>
        <td>echo “some text”</td>
        <td>sudo tee -a /path/file</td>
      </tr>
    </tbody>
  </table>
</blockquote>

<h4 id="kill-signal">列出所有kill signal参数:</h4>
<blockquote>
  <p>kill -l</p>
</blockquote>

<h4 id="bash-1">在bash历史记录里禁止记录最后一次会话：</h4>
<blockquote>
  <p>kill -9 $$</p>
</blockquote>

<h4 id="section-17">扫描网络寻找开放的端口：</h4>
<blockquote>
  <p>nmap -p 8081 172.20.0.0/16</p>
</blockquote>

<h4 id="git-email">设置git email:</h4>
<blockquote>
  <p>git config –global user.email “me@example.com”</p>
</blockquote>

<h4 id="to-sync-with-master-if-you-have-unpublished-commits">To sync with master if you have unpublished commits:</h4>
<blockquote>
  <p>git pull –rebase origin master</p>
</blockquote>

<h4 id="txthomeuser">将所有文件名中含有”txt”的文件移入/home/user目录:</h4>
<blockquote>
  <p>find -iname “<em>txt</em>” -exec mv -v {} /home/user \;</p>
</blockquote>

<h4 id="section-18">将文件按行并列显示：</h4>
<blockquote>
  <p>paste test.txt test1.txt</p>
</blockquote>

<h4 id="shell-1">shell里的进度条:&gt;</h4>
<blockquote>
  <p>pv data.log</p>
</blockquote>

<h4 id="netcatgraphite-server">使用netcat将数据发送到Graphite server:</h4>
<blockquote>
  <table>
    <tbody>
      <tr>
        <td>echo “hosts.sampleHost 10 <code>date +%s</code>”</td>
        <td>nc 192.168.200.2 3000</td>
      </tr>
    </tbody>
  </table>
</blockquote>

<h4 id="tabs">将tabs转换成空格：</h4>
<blockquote>
  <p>expand test.txt &gt; test1.txt</p>
</blockquote>

<h4 id="skip-bash-history">Skip bash history:</h4>
<blockquote>
  <p>&lt; space &gt;cmd</p>
</blockquote>

<h4 id="section-19">去之前的工作目录：</h4>
<blockquote>
  <p>cd -</p>
</blockquote>

<h4 id="targz100mb">拆分大体积的tar.gz文件(每个100MB)，然后合并回去：</h4>
<blockquote>
  <p>split –b 100m /path/to/large/archive /path/to/output/files
cat files* &gt; archive</p>
</blockquote>

<h4 id="curlhttp-status-code">使用curl获取HTTP status code:</h4>
<blockquote>
  <p>curl -sL -w “%{http_code}\n” www.example.com -o /dev/null</p>
</blockquote>

<h4 id="rootmysql">设置root密码，强化MySQL安全安装:</h4>
<blockquote>
  <p>/usr/bin/mysql_secure_installation</p>
</blockquote>

<h4 id="ctrl--c">当Ctrl + c不好使时:</h4>
<blockquote>
  <p>Ctrl + \</p>
</blockquote>

<h4 id="owner">获取文件owner:</h4>
<blockquote>
  <p>stat -c %U file.txt</p>
</blockquote>

<h4 id="block">block设备列表：</h4>
<blockquote>
  <p>lsblk -f</p>
</blockquote>

<h4 id="section-20">找出文件名结尾有空格的文件：</h4>
<blockquote>
  <p>find . -type f -exec egrep -l “ +$” {} \;</p>
</blockquote>

<h4 id="tab">找出文件名有tab缩进符的文件</h4>
<blockquote>
  <p>find . -type f -exec egrep -l $’\t’ {} \;</p>
</blockquote>

<h4 id="section-21">用”=”打印出横线:</h4>
<blockquote>
  <table>
    <tbody>
      <tr>
        <td>printf ‘%100s\n’</td>
        <td>tr ‘ ‘ =</td>
      </tr>
    </tbody>
  </table>
</blockquote>

<hr />
<p>##### 文章转自：<a href="http://www.codeceo.com/linux-shell.html">码农网</a></p>

<h5 id="linux-shell-tips-and-trickshttpwwwtechbarmelinux-shell-tips----aqeenet">[英文原文：<a href="http://www.techbar.me/linux-shell-tips/">Linux shell tips and tricks</a> ]   译文来自：aqee.net</h5>
]]></content>
  </entry>
  
</feed>
